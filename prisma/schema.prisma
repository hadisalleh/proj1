generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Trip {
  id           String    @id @default(cuid())
  title        String
  description  String
  locationName String
  latitude     Float
  longitude    Float
  duration     Int
  basePrice    Decimal   @db.Decimal(10, 2)
  images       String[]
  inclusions   String[]
  boatType     String
  fishingTypes String[]
  maxGuests    Int
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  bookings     Booking[]
  reviews      Review[]

  @@map("trips")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  phone         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  bookings      Booking[]
  reviews       Review[]
  sessions      Session[]

  @@map("users")
}

model Booking {
  id         String        @id @default(cuid())
  tripId     String
  userId     String
  startDate  DateTime
  endDate    DateTime?
  guests     Int
  totalPrice Decimal       @db.Decimal(10, 2)
  status     BookingStatus @default(PENDING)
  paymentId  String?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  trip       Trip          @relation(fields: [tripId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@map("bookings")
}

model Review {
  id        String   @id @default(cuid())
  tripId    String
  userId    String
  rating    Int      @db.SmallInt
  comment   String?
  images    String[]
  tripDate  DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  trip      Trip     @relation(fields: [tripId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([tripId, userId])
  @@map("reviews")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
